generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  lastLogin     DateTime

  accounts      Account[]
  accountTypes  AccountType[]
  recordTypes   AccountRecordType[]
  creatorAccountRecords AccountRecord[] @relation("CreatedBy")
  updatorAccountRecords AccountRecord[] @relation("UpdatedBy")

  @@map("user")
}

model SideMenu {
  id        Int         @id @default(autoincrement())
  name      String
  iconName  String
  path      String
  parentId  Int?
  parent    SideMenu?   @relation("SideMenuToSelf", fields: [parentId], references: [id])
  children  SideMenu[]  @relation("SideMenuToSelf")

  @@map("side_menu")
}

model AccountType {
  id         Int       @id @default(autoincrement())
  name       String
  iconName   String?
  createdBy  Int
  creator    User      @relation(fields: [createdBy], references: [id])

  accounts   Account[]

  @@map("account_type")
}

model Account {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  accountTypeId  Int
  accountType    AccountType   @relation(fields: [accountTypeId], references: [id])
  name           String
  is_shared      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isActive       Boolean

  accountRecords        AccountRecord[]

  @@map("accounts")
}

model AccountRecordType {
  id             Int             @id @default(autoincrement())
  name           String
  iconName       String?
  createdBy      Int
  creator        User            @relation(fields: [createdBy], references: [id])

  @@map("account_record_type")
}

model AccountRecord {
  id                   Int                @id @default(autoincrement())
  accountId            Int
  
  value                Decimal
  createdBy            Int
  createdAt            DateTime           @default(now())
  updatedBy            Int
  updatedAt            DateTime           @updatedAt

  creator              User               @relation("CreatedBy", fields: [createdBy], references: [id])
  updator              User               @relation("UpdatedBy", fields: [updatedBy], references: [id])
  account              Account            @relation(fields: [accountId], references: [id])
 

  @@map("account_record")
}

model Member {
  id              Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  middle_name     String
  identity_number Int
  cell            String
  email           String
  expiration_date DateTime
  has_paid        Boolean   @default(false)
  created_on      DateTime  @default(now())
  updated_on      DateTime

  @@map("member")
}
