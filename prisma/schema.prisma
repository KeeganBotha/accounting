generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  lastLogin     DateTime

  accounts      Account[]
  accountTypes  AccountType[]

  transactionCategories TransactionCategory[]
  transactionCategoryGroups TransactionCategoryGroup[]
  creatorTransactions Transaction[] @relation("CreatedBy")
  updatorTransactions Transaction[] @relation("UpdatedBy")

  @@map("user")
}

model SideMenu {
  id        Int         @id @default(autoincrement())
  name      String
  iconName  String
  path      String
  parentId  Int?
  parent    SideMenu?   @relation("SideMenuToSelf", fields: [parentId], references: [id])
  children  SideMenu[]  @relation("SideMenuToSelf")

  @@map("side_menu")
}

model AccountType {
  id         Int       @id @default(autoincrement())
  name       String
  iconName   String?
  createdBy  Int
  creator    User      @relation(fields: [createdBy], references: [id])

  accounts   Account[]

  @@map("account_type")
}

model Account {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  accountTypeId  Int
  accountType    AccountType   @relation(fields: [accountTypeId], references: [id])
  name           String
  is_shared      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isActive       Boolean

  transactions   Transaction[]

  @@map("accounts")
}

model TransactionCategoryGroup {
  id            Int @id @default(autoincrement())
  name          String
  iconName      String?
  createdBy     Int
  
  creator       User @relation(fields: [createdBy], references: [id])
  transactionCategories TransactionCategory[]

  @@map("transaction_category_group")
}

model TransactionCategory {
  id             Int             @id @default(autoincrement())
  name           String
  iconName       String?
  createdBy      Int
  transactionCategoryGroupId Int?

  transactions   Transaction[]

  creator        User            @relation(fields: [createdBy], references: [id])
  transactionCategoryGroup TransactionCategoryGroup? @relation(fields:[transactionCategoryGroupId], references: [id])

  @@map("transaction_category")
}

model Transaction {
  id                   Int                @id @default(autoincrement())
  accountId            Int
  transactionCategoryId Int?
  value                Decimal
  description          String
  isShared             Boolean            @default(false)

  createdBy            Int
  createdAt            DateTime           @default(now())
  updatedBy            Int
  updatedAt            DateTime           @updatedAt

  creator              User               @relation("CreatedBy", fields: [createdBy], references: [id])
  updator              User               @relation("UpdatedBy", fields: [updatedBy], references: [id])
  account              Account            @relation(fields: [accountId], references: [id])
  transactionCategory  TransactionCategory?  @relation(fields: [transactionCategoryId], references: [id])
 
  @@map("transaction")
}